
Use of assert:


Iterable: 
 - Which contains more than one item, can be Indexed or Unindexed.
 - You can use "in" key word to check if an item or substr is in the iterable.
 - Magical methods used are : __contains__ and __iter__.
 - Indexed will have these magical methods : __getitem__ and __getattribute__.
 - Unindexed will have only __getattribute__, not __getitem__.
 - For dict, you will still see __getitem__, since you can get the value from key.
 - So, __getitem__ will work based on index as well as key.
 - Are stateless objects, which cannot remember the values from memory.
 - Eg: use of readline() method, which will read the next line.
 - However, using iter() built-in function(b-in func), we can convert them to stateful.
 - The "for" loop also converts the iterable to an Iterator by applying iter() b-in func.

Iterator:
 - An iterable can be converted to an Iterator using __iter__() method or iter() b-in func.
 - For eg: x=[1,2,3,4] is an iterable.
 - Calling y=iter(x) or y=x.__iter__(), will convert x to an Iterator.
 - To check if its an iterator... use b-in func next(y) or y.__next__() to loop through.

Real time eg:
 - Iterable:
   - People waiting for interview, standing in a queue(ordered) or
   - Group of people in a room(unordered).
   - So, its just the data collection which we have in a variable.

 - Iterator:
   - Call the People for interview one by one.
   - We will call them by person name incase of unordered, use of b-in func next().
   - We will call them by position in case of Ordered, use of b-in func next().
   - Stop the interview process(StopIteration) after reaching the last person. 
   - So, the process of converting the data for further operation/execution.

Refer - https://www.programiz.com/python-programming/iterator

Generators are a simple and powerful tool for creating iterators. They are written like regular functions but use the yield statement whenever they want to return data. Each time next() is called on it, the generator resumes where it left off (it remembers all the data values and which statement was last executed).

    The yield expression is only used when defining a generator function, and can only be used in the body of a function definition. Using a yield expression in a function definition is sufficient to cause that definition to create a generator function instead of a normal function.

    When a generator function is called, it returns an iterator known as a generator. That generator then controls the execution of a generator function.

>>> x=10
>>> for i in x:
...    print(i)
... 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not iterable
>>> for i in str(x):
...    print(i)
... 
1
0


>>> x = (i for i in range(10))
>>> z=list(x)
>>> z
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> z
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> next(z)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'list' object is not an iterator
>>> next(iter(z))
0
>>> next(iter(z))
0
>>> next(iter(z))
0
>>> k=iter(z)
>>> next(k)
0
>>> next(k)
1
>>> next(k)
2
>>> k
<list_iterator object at 0x7f8311b0b748>
>>> list(k)
[3, 4, 5, 6, 7, 8, 9]
>>> z
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> k=iter(z)
>>> for i in k:
...     print(i)
... 
0
1
2
3
4
5
6
7
8
9
>>> k
<list_iterator object at 0x7f830ff22a58>
>>> next(k)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration

