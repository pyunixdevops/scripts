Terraform: Its a replacement for Vagrant to quickly create your test/dev env



Docker: one line commands - https://docs.docker.com/engine/reference/commandline/ps/#formatting

docker ps -sa # This option -s shows with the size of the container

To list all running containers (just stating the obvious and also example use of -f filtering option)

docker ps -sa -f status=running

To list all running and stopped containers, showing only their container id

docker ps -saq

To remove all containers that are NOT running

docker rm `docker ps -aq -f status=exited`


docker ps -aq --no-trunc

That way, you can use the list of all containers for other commands (which accept multiple container ids as parameters).

For example, to list only the name of all containers (since docker ps list only their names with other information):

docker inspect --format='{{.Name}}' $(sudo docker ps -aq --no-trunc)

docker container ls -a


docker stack ls
docker service ls
docker image ls
docker container ls

For showing the latest created container:

docker ps -l

Docker 1.13 and higher:

docker run -it --cpus=".5" ubuntu /bin/bash



docker stats redis1 redis2

CONTAINER   CPU %   MEM USAGE / LIMIT     MEM %   NET I/O            BLOCK I/O
redis1      0.07%   796 KB / 64 MB        1.21%   788 B / 648 B       3.568 MB / 512 KB
redis2      0.07%   2.746 MB / 64 MB      4.29%   1.266 KB / 648 B    12.4 MB / 0 B


exited

The exited filter matches containers by exist status code. For example, to filter for containers that have exited successfully:

$ docker ps -a --filter 'exited=0'

You can use a filter to locate containers that exited with status of 137 meaning a SIGKILL(9) killed them.

$ docker ps -a --filter 'exited=137'

status

The status filter matches containers by status. You can filter using created, restarting, running, removing, paused, exited and dead. For example, to filter for running containers:

$ docker ps --filter status=running

ancestor

The ancestor filter matches containers based on its image or a descendant of it. The filter supports the following image representation:

    image
    image:tag
    image:tag@digest
    short-id
    full-id

If you don’t specify a tag, the latest tag is used. For example, to filter for containers that use the latest ubuntu image:

$ docker ps --filter ancestor=ubuntu


 
docker stop [OPTIONS] CONTAINER [CONTAINER...]

Options
Name, shorthand 	Default 	Description
--time , -t 	10 	Seconds to wait for stop before killing it

Parent command
Command 	Description
docker 	The base command for the Docker CLI.
Extended description

The main process inside the container will receive SIGTERM, and after a grace period, SIGKILL.


Docker deploy - to create a stack

Compose file

The deploy command supports compose file version 3.0 and above.

$ docker stack deploy --compose-file docker-compose.yml vossibility

DAB file

$ docker stack deploy --bundle-file vossibility-stack.dab vossibility


You can find PID of container using: docker inspect < container-id > | grep PID

Note: If you have started your container with -d flag then exiting out of container will not stop the container,whether you use attach or exec to get inside.


Get the exit code of the container’s command

And in this second example, you can see the exit code returned by the bash process is returned by the docker attach command to its caller too:

    $ docker run --name test -d -it debian

    275c44472aebd77c926d4527885bb09f2f6db21d878c75f0a1c212c03d3bcfab

    $ docker attach test

    root@f38c87f2a42d:/# exit 13

    exit

    $ echo $?

    13

    $ docker ps -a | grep test

    275c44472aeb        debian:7            "/bin/bash"         26 seconds a


